*sniplate.txt*

Version : 0.0.3
Author  : Mi_Sawa <mi.sawa.1216+vim@gmail.com>
License : zlib License
==============================================================================
目次                                            *sniplate-contents*

概要                            |sniplate-introduction|
注意                            |sniplate-attention|
インストール                    |sniplate-install|
使い方                          |sniplate-usage|
インターフェース                |sniplate-interface|
  コマンド                        |sniplate-commands|
  関数                            |sniplate-functions|
  変数                            |sniplate-variables|
構文                            |sniplate-syntax|
  キーワード                    |sniplate-keyword|
例                              |sniplate-examples|
Unite sources                   |sniplate-unite-sources|
更新履歴                        |sniplate-changelog|



==============================================================================
概要                                            *sniplate-introduction*

*sniplate* (又は *sniplate.vim* )は, ファイルの編集中に, コード断片を読み込む為の
プラグインである. 既存のプラグインに比べ, 関数程度の大きさのコードを扱いやすく
, 依存関係, 多重読み込みの防止等の機能がある.

また, |unite| の source として, スニペットを選択出来る.

Latest version:
http://github.com/MiSawa/sniplate.vim


==============================================================================
注意                                            *sniplate-attention*

Note:
このプラグインは開発途中である為, 互換性を持たない更新が行われる場合がある.
|neobundle| 等のプラグイン管理プラグインを用いている場合, リビジョンを固定する
事を勧める.

Note:
例は, 全ての設定がデフォルトの場合の物である.


==============================================================================
インストール                                    *sniplate-install*

配布ファイルをVimスクリプトのディレクトリへインストールする.
(普通は ~/.vim/ , Windowsの場合, $HOME/vimfiles である.)

|neobundle| 等を用いている場合は, |.vimrc| に
>
    NeoBundle 'MiSawa/sniplate.vim'
<
と記述し, |:NeoBundleInstall| を実行する. 但し, |sniplate-attention| を参照せよ.


==============================================================================
使い方                                          *sniplate-usage*

~/.vim/sniplate 以下にファイルタイプ別のディレクトリを作り, そこにスニペットフ
ァイルを作成する. フォルダの場所を変更したい場合は,
|g:sniplate#sniplates_directory| , |g:sniplate#filetype_config| を参照.
スニペットファイルの作成については, |sniplate-syntax|, |sniplate-examples| を参照.
スニペットを挿入するには, |SniplateLoad| を用いるが, |unite| をインストールしている
場合は, 'Unite sniplate' を用いる事も出来る.


==============================================================================
インターフェース                                *sniplate-interface*

------------------------------------------------------------------------------
コマンド                                        *sniplate-commands*

                                                *:SniplateLoad*
:[line]SniplateLoad[!] {snippetnames}
        指定した名前のスニペットを [line] の位置に読み込む. [line] を省略した
        場合, 現在行に読み込む. [!] を付けると, |sniplate-keyword-pattern| に依
        らず, 強制的に読み込む. 複数のスニペットを指定した際も, 一回の挿入と見
        なされ, 引数で後ろの物ほど後に挿入される.

                                                *:SniplateClearCache*
:SniplateClearCache [{filetypes}]
        {filetypes} で指定したファイルタイプのキャッシュを削除する. {filetype}
        に何も指定しなければ, 全てのキャッシュを削除する.
        例: ファイルタイプが cpp と ruby のキャッシュを削除する.
>
            SniplateClearCache cpp ruby
<
                                                *:SniplateClearVariables*
:SniplateClearVariables [{varnames}]
        {varnames} で指定した変数名の, |sniplate-keyword-input|
        や |sniplate-keyword-var| によって生成されたキャッシュを削除する.
        {varnames} に何も指定しなければ, 全ての変数を削除する.
        例: 変数 X と Y を削除する.
>
            SniplateClearVariables X Y
<
------------------------------------------------------------------------------
関数                                            *sniplate-functions*

                                *sniplate#load_sniplate*
sniplate#load_sniplate( {name} [, {line} [, {force}]])
        {name} で指定されたスニペットを, {line} で指定した行に挿入する.
        {force} が真の時は, |sniplate-keyword-pattern| に依らず, 強制的に読み
        込む. {name} はスニペット名であり, {line} が省略された場合は現在行,
        {force} が省略された場合は偽.

                                *sniplate#load_sniplates*
sniplate#load_sniplates( {names} [, {line} [, {force}]])
        {names} で指定されたスニペットを, {line} で指定した行に挿入する.
        {force} が真の時は, |sniplate-keyword-pattern| に依らず, 強制的に読み
        込む. {names} はスニペット名のリストであり, {line} が省略された場合は
        現在行, {force} が省略された場合は偽.

                                *sniplate#load_sniplate_if_exists*
sniplate#load_sniplate_if_exists( {name} [, {line} [, {force}]])
        |sniplate#load_sniplate| と同様であるが, 存在しないスニペット名が指定
        された場合, エラーを出さず, 無視する.

                                *sniplate#load_sniplates_if_exists*
sniplate#load_sniplates_if_exists( {names} [, {line} [, {force}]])
        |sniplate#load_sniplates| と同様であるが, 存在しないスニペット名が指定
        された場合, エラーを出さず, 無視する.

                                *sniplate#clear_cached_sniplates*
sniplate#clear_cached_sniplates( [{filetype} ...])
        引数にはファイルタイプを列挙する. 引数で指定されたファイルタイプのスニ
        ペットのキャッシュを削除する. 引数を指定しなければ, 全てのスニペットの
        キャッシュを削除する. |:SniplateClearCache| の関数版.

                                *sniplate#clear_cached_variables*
sniplate#clear_cached_variables( [{varname} ...])
        引数には変数名を列挙する. 引数で指定された変数名の,
        |sniplate-keyword-input| や |sniplate-keyword-var| によって生成されたキャ
        ッシュを削除する. 引数を指定しなければ, 全ての変数のキャッシュを削除す
        る. |:SniplateClearVariables| の関数版.

------------------------------------------------------------------------------
変数                                            *sniplate-variables*

                                *g:sniplate#sniplates_directory*
g:sniplate#sniplates_directory          String (default: '~/.vimrc')
        スニペットを置くディレクトリへのパス.

                                *g:sniplate#filetype_config*
g:sniplate#filetype_config              Dictionary (default: {})
        ファイルタイプ別の設定を行う為の辞書. 各キーはファイルタイプ名であるが
        , 全てのファイルタイプに共通する設定は '_' で, ファイルタイプが無い場
        合は 'nothing' で扱う.

        directory                       String (default: same as &ft)
            |g:sniplate#sniplates_directory| からのパスを記述する.

        overwrite                       Number (default: 2)
            スニペットを挿入する行を削除するか否かを選択する.値は 0, 1, 2 のい
            ずれかである. 値が 0 である時は保持する. 値が 1 である時は削除する
            . 値が 2 である時は, バッファが空の行一行のみからなる場合は削除し,
            それ以外では保持する.

        keyword_pattern                 String (default: show below)
            この変数を変更する事で, キーワードのパターンを変更する事が出来る.
            これにマッチする行が, キーワードを含む行と解釈され, 1番目のサブマ
            ッチがキー, 2番目がその引数となる.

            デフォルトの値は '{{\s*\(.\{-\}\)\s*\%(:\s*\(.\{-\}\)\s*\)\?}}'.

        例: ファイルタイプが cpp の時に, |g:sniplate#sniplates_directory| 直下の
            cplusplus ディレクトリにスニペットを置き, キーワードをブロックコメ
            ントで囲う場合.
>
            let g:sniplate#filetype_config = {}
            let g:sniplate#filetype_config['cpp'] = {
                \ 'directory' : 'cplusplus',
                \ 'keyword_pattern':
                \ '/\*\s*{{\s*\(.\{-\}\)\s*\%(:\s*\(.\{-\}\)\s*\)\?}}\s*\*/'
                \ }
<
                                *g:sniplate#enable_cache*
g:sniplate#enable_cache                 Number (default: 1)
        この変数が真の時, ファイルタイプ毎に, 一度列挙したスニペットをキャッシ
        ュする.

                                *g:sniplate#cache_variable_in_buffer*
g:sniplate#cache_variable_in_buffer     Number (default: 1)
        この変数が真の時, バッファ毎に, 一度入力した変数をキャッシュする.

                                *g:sniplate#sniplate_begin_keyword*
g:sniplate#sniplate_begin_keyword       String (default: 'BEGIN SNIPLATE')
        スニペットの開始キーワード.

                                *g:sniplate#sniplate_end_keyword*
g:sniplate#sniplate_end_keyword         String (default: 'END SNIPLATE')

        スニペットの終了キーワード.


==============================================================================
構文                                            *sniplate-syntax*

開始キーワードから, 終了キーワードの間に, スニペットを記述する. これらのキーワ
ードを変更するには, |g:sniplate#sniplate_begin_keyword|,
|g:sniplate#sniplate_end_keyword| を参照.
開始キーワードの直後に, スニペットの名前を記述する. これは, 各ファイルタイプ毎
に一意でなければならない.

スニペットでは, いくつかのキーワードを埋め込む事が出来る. 具体的な用例は,
|sniplate-examples| を参照. キーワードのパターンは, |g:sniplate#filetype_config|
の 'keyword_pattern' キーによって変更する事が出来る. キーワードを埋め込むか否
かは任意であり, 必須なものではない.

------------------------------------------------------------------------------
キーワード                                      *sniplate-keyword*

                                                *sniplate-keyword-abbr*
- {{ abbr: {abbr} }}
    Uniteからスニペットを選択する際, スニペット名に加えて {abbr} が表示される.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-class*
- {{ class: {classs} }}
    {classses} はカンマ区切りの文字列であり, そのスニペットが属するクラスを表
    す.  Uniteでの絞り込みに利用される.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-require*
- {{ require: {names} }}
    {names} はカンマ区切りのスニペット名であり, これらに依存するスニペットであ
    る事を示す. {names} は, 最初にある物ほど上になるように挿入され, 再帰的に処
    理される. 具体的には, 深さ優先探索の帰りがけ順で挿入される.  pattern キー
    ワードに依らず, 同じ物が何度も require されていても, 挿入されるのは一度で
    ある. |sniplate-keyword-class| の継承は行われない. (今後もそうであるとは限
    らない)
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-pattern*
- {{ pattern: {pat} }}
    これが指定された場合, このスニペットの多重読み込みを禁止する. このスニペッ
    トが既に読み込まれているかの判定は, {pat} にマッチするか否かで行われる.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-priority*
- {{ priority: {num} }}
    候補の表示順に影響する. {num} が大きいもの程, 前に表示される. このキーワー
    ドが指定されていないスニペットは priority が 0 であるものとして扱われる.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-invisible*
- {{ invisible }}
    これが指定された場合, |unite| や |:SniplateLoad| での候補として表示されな
    くなる.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-overwrite*
- {{ overwrite : {flag} }}
    {flag} には, 0, 1, 2, false, true, auto が使える. 最後に読み込まれるスニペ
    ットの物のみ有効であり, false は 0, true は 1, auto は 2 と同義で,
    |g:sniplate#filetype_config| の 'overwrite' キーと同じ動作を意味するが, こ
    のキーに依らず動作する.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-exec*
- {{ exec: {expr} }}
    execute {expr} が行われる.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-input*
- {{ input: {var} : {prompt} [, {text} [, {completion}]] }}
    変数 {var} に値が設定されていない場合, 変数 {var} に値を設定するプロン
    プトを表示する. 書式は |input| を参照. 既に {var} に値が設定されている場合
    は何もしない.  |g:sniplate#cache_variable_in_buffer| が偽の時, この変数は,
    一回の読み込みの間のみ値が保たれる. require 等により同時に読み込まれるスニ
    ペットについても, 同じ変数名に対しては同じ値が保たれる.
    |g:sniplate#cache_variable_in_buffer| が真の時は, この変数は, 同じバッファ
    に対して保たれる.
    この行は挿入されない. この行に他のキーワードを含めてはならない.

                                                *sniplate-keyword-var*
- {{ var: {var} }}
    変数 {var} に値が設定されていない場合は, 'var {var}: ' というプロンプトが
    表示され, {var} に入力された値を設定する.
    変数 {var} の値に置き換わる.

                                                *sniplate-keyword-cursor*
- {{ cursor }}
    これが指定された場合, このスニペットを挿入した後に, これがあった場所にカー
    ソルを移動する.
    依存するスニペット等により, 一度の挿入で複数の {{ cursor }}があった場合は,
    最下部の物が適用される.
    挿入時には, {{ cursor }} の部分は削除される.

                                                *sniplate-keyword-eval*
- {{ eval: {expr} }}
    この部分は, 挿入時に eval( {expr} ) によって評価された値に置き換わる.


Note:
変数 X に対し, >
        {{ var : X }}
<と入力すると, 無限ループに陥る.
また, eval で 自分自身を表現する文字列(いわゆるQuine) を書くと, 無限ループに
陥る. 止めるには, CTRL-C (Windowsの場合は CTRL-Break) を押下する.


==============================================================================
例                                              *sniplate-examples*

新しいファイルを作る時, 'template'という名前のスニペットがそのファイルタイプに
存在すれば, ロードする.
>
    autocmd BufNewFile * call sniplate#load_sniplate_if_exists('template')
<

|unite| を使う場合, キーマッピングをしておくと便利である.
>
    nnoremap [unite] <Nop>
    xnoremap [unite] <Nop>
    nmap <Space>u [unite]
    xmap <Space>u [unite]
    nnoremap <silent> [unite]t :<C-u>Unite sniplate
          \ -start-insert<CR>
<

sniplateファイルの例.
>
    // ~/.vim/sniplate/cpp/main.cc
    // 拡張子は必ずしも一致していなくても良い.

    // BEGIN SNIPLATE time
    // {{invisible}}
    // inserted at {{eval: strftime('%c')}}
    // END SNIPLATE

    // BEGIN SNIPLATE includes
    // {{exec: set foldmethod=marker}}
    // {{invisible}}
    #include <iostream> //{{{
    #include <vector>
    //  : and many more
    #include <cmath> //}}}
    // END SNIPLATE

    // BEGIN SNIPLATE header
    // {{require: time, includes}}
    // {{invisible}}
    // END SNIPLATE

    // BEGIN SNIPLATE main_void
    // {{require: header}}
    // {{overwrite: auto}}
    int main(void) {
        {{cursor}}
        return 0;
    }
    // END SNIPLATE

    // BEGIN SNIPLATE main_args
    // {{require: header}}
    // {{overwrite: auto}}
    int main(int argc, char const* argv[]) {
        {{cursor}}
        return 0;
    }
    // END SNIPLATE
<

>
    // ~/.vim/sniplate/cpp/math/num/gcd.cpp
    // 深いディレクトリでもよい.

    // BEGIN SNIPLATE gcd
    // {{pattern: ^\s*\(.*\)\s*gcd(\1\s*a,\s*\1\s*b)\s*{$ }}
    // {{class: number, algebra}}
    // {{input: T : 'input T: ', 'int'}}
    {{var: T}} gcd({{var: T }} a, {{var: T}} b) {
        while(b) swap(a%=b, b);
        return a;
    }
    // END SNIPLATE
<
>
    // ~/.vim/sniplate/cpp/math/num/lcm.cpp
    // 同じファイルからでなくても require 可能.

    // BEGIN SNIPLATE lcm
    // {{require: gcd}}
    // {{class: number, algebra}}
    // {{pattern: ^\s*\(.*\)\s*lcm(\1\s*a,\s*\1\s*b)\s*{$ }}
    {{var: T}} lcm({{var: T}} a, {{var: T}} b) {
        return a / gcd(a, b) * b;
    }
    // END SNIPLATE
<

==============================================================================
Unite sources                               *sniplate-unite-sources*

|sniplate.vim| は, 2つの |unite-sources| を提供する.

                                            *sniplate-unite-source-sniplate*
Unite sniplate[:{arg} [:{arg} [...]]]
        現ファイルタイプのスニペットを候補とする. 複数選択が可能で, 現在行に挿
        入する事が出来る. また, |unite-kind-jump_list| により, スニペットが定
        義されたファイルを開く事が可能. {arg} に '!' を渡すと,
        *sniplate-keyword-require* に関わらず, 強制的に挿入する. 引数にクラス
        を指定すると, それらのクラスのいずれかに属するスニペットのみを表示する.

        例: number クラスの候補を表示し, 強制的に挿入する場合.
>
            Unite sniplate:!:number
< 
                                        *sniplate-unite-source-sniplate-variable*
Unite sniplate/variable[:{var} [:{var} [...]]]
        バッファにキャッシュされた変数を候補選択出来る. 値の変更や, キャッシュ
        からの削除が可能. 引数が指定されると, その候補のみを表示する.


==============================================================================
更新履歴                                        *sniplate-changelog*

0.0.3   2013-02-07
        - class を追加.
        - unite での補完関数を改善した.
        - fix typo

0.0.2   2013-02-07
        - unite でスニペットを複数選択可能にした.
        - unite source に sniplate/variables を追加した.

0.0.1   2013-02-06
        - priority, invisible, input, exec, var, cursor, eval を追加.
        - キーワードパターンを, ファイルタイプ毎に設定出来るように変更.
        - overwrite を追加.

0.0.0   2013-02-05
        - これまでローカルで用いていた物を大幅に書きなおし, 初版とした.


==============================================================================
vim:tw=78:ts=8:fo=tcq2mM:ft=help:norl
